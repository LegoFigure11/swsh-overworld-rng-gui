using System;
using System.Numerics;
using System.Text;
using System.Windows.Forms;

namespace SWSH_OWRNG_Generator_GUI
{
    public partial class Form1 : System.Windows.Forms.Form
    {
        public string State0
        {
            get
            {
                return ResultState0.Text;
            }
        }
        public string State1
        {
            get
            {
                return ResultState1.Text;
            }
        }
        public Form1()
        {
            InitializeComponent();
        }

        private void PhysicalButton_Click(object sender, EventArgs e)
        {
            if (MotionsSequenceInput.Text.Length != 128)
                MotionsSequenceInput.Text += "0";
        }

        private void SpecialButton_Click(object sender, EventArgs e)
        {
            if (MotionsSequenceInput.Text.Length != 128)
                MotionsSequenceInput.Text += "1";
        }

        private void MotionsSequenceInput_TextChanged(object sender, EventArgs e)
        {
            if (MotionsSequenceInput.Text.Length == 128)
            {
                // algo from https://github.com/niart120/Project_Xe
                // precomputed
                string[] matStrings = new string[] { "18446744073709551617", "20284885483748687928570893303809", "332306999256960848837486581555136513", "1661717559013652720345964354035976448", "2663993802454764070349439645142548482", "95711231378451757507131022724307697859", "21602901370932144985238608404058095875", "74909593634744164624465814906080807633", "170507405837838652846161371357876260308", "15444618855641040870442700048698514125", "23804303250665982048996650364463573526", "101053950235834374802749390681714615309", "174822769297343376685732513633102022852", "148631551223252383639154049541655797115", "300474914895877623199690704056502954281", "239734323237362132003223401645285550961", "85590308761352424105727073294047049439", "214938973692909211962237244798845827333", "250270925666460676585907765453210101601", "182799060119388198011942002763173727366", "158915172139911524770190402760194939634", "117472892509588661201036821400183860917", "176722450830693953571129399098120173570", "30308151714636407273533863755381113478", "247197950512869309769852422263789551124", "338305831042852796248845707390548967327", "125381672985003649971824736479861012858", "232250648016252446043285640488401539386", "332478356814698872973061642632092430688", "132433705155505339995748430975010172733", "38140816777417425001015138534348896438", "40640616739274978601185372186112245091", "339650660958135287201677628755368348374", "269078236432286190268901933435565415376", "225733304024434891434376261900319306715", "120673639943505927079353973294214124879", "20164892463811187741748828231410944117", "267696542876052763980231533645574233256", "16868248334567962701197487642121213464", "276964351980171947232784633605741749440", "50882166402583744371706581338100766921", "162723903263554247438069992967318935162", "125833904169718275005509645318766809562", "146193134133836920594611619270795743590", "226170592006060162799228311310526299622", "170942632484144519452981244797856702212", "14444069687375977555201105725324016484", "18563324705213192383896710425364176416", "272292253537075051697825130408185470164", "63121787764442311859191078188898123922", "12469447722597663513079219357066731684", "120271815250345850074425168905100761845", "56273781745104210265550910422572138276", "152922677760108863666102276088081660461", "140078769111720417166412277247086241520", "148191310494554881659325155599220562687", "316881525541327066928129499439037905840", "236948989665703239087498885242170645655", "155908838211386412982689282146317281177", "199344672799803621394462758644584766705", "158625190865261650153071040763218837315", "107045819553778053347838101648836609516", "258236340598961720835968334966535951344", "192101851954516908986836899826668847907", "253955310487632729937846119004414333643", "79104574705911796360258635506960914952", "44236965921403668869855895712794852945", "216465281273836520706528301435487078801", "209216978135436893991846100462950829499", "317056857444769316489084657273478786473", "227180937177769304149866146883705759067", "33085205715342134280537484876561997709", "61422632073435415067472445858795558987", "57312477317857167461612518861660031643", "159891998432864497765374701777934603115", "137852023519729026730780045806628502639", "235982503197943606242752589438099541274", "245297690326629123940920470307000305980", "252732932243088165995825409629097386333", "138704362316082969396533865852761342478", "249389388508768764764488989163498066948", "223046036906338226821350989691784543963", "20042249814246663667010967951303767301", "268867140825723575844600118623366552567", "230937722854893227947945354978707270356", "282571926088751356298618276986692494530", "154879804910117200225240179411143343408", "150267077174732080276265162577317201541", "295002772390704382384826857902756767803", "155341247536718133381409383216060145899", "93823881088174186000960746343041108095", "287426284292850520987262752680153626907", "249515110607183986013308580411338591213", "337951321179662131887002155503086021303", "150026205692049382790796338029344947678", "58686853422144875891247952628404226781", "139663153364382714799001347831884730314", "168521391887913424682352695823798638420", "89285683395016024349990373518568790014", "232931117832538148317070363683563524043", "162052460503250840651262898292008328680", "68604932817806081898375977110629191594", "94420225139797209187690506391142820714", "272341133415735216183913542930479527135", "28686184571324375768384798841956982682", "165251406819531969021903848436837654297", "139942576019632790623098697967994608567", "57125756532481161501396437563803259015", "304528374666335905593505275434331334152", "85643161276767915199689879762267704147", "323894234391698044197921065853535874468", "338271641905554167886834873204269389804", "5229609513262026103964155375650775823", "40526370360885081469616177119326138010", "96263039281098138263231904970679435114", "167899198569311294038383902326943063286", "66645773676340059600746962490626471586", "272772040860758228214752467699287140820", "117060419452137392366235733028224543864", "317420550558250826285732808511669760713", "106015360967381854666369633166431104712", "68762239006424397782331055344995469946", "206865548292008519648937020175630051513", "250326747034511608505131581279594407730", "17835221740581219393381232126128851176", "26067712339931064558048247501683693938", "78625495277959586466232737879832312261", "27241545647790481884990606855858204291" };
                BigInteger[] mat = new BigInteger[128];
                byte[] res = new byte[128];
                for (int i = 0; i < 128; i++)
                {
                    mat[i] = BigInteger.Parse(matStrings[i]);
                    res[i] = (byte)(MotionsSequenceInput.Text[i] - '0');
                }
                int pivot = 0;
                bool isFound;
                for (int i = 0; i < 128; i++)
                {
                    isFound = false;
                    for (int j = i; j < 128; j++)
                    {
                        BigInteger check = 1;
                        check <<= 128 - i - 1;
                        if (isFound)
                        {
                            if ((mat[j] & check) == check)
                            {
                                mat[j] ^= mat[pivot];
                                res[j] ^= res[pivot];
                            }
                        }
                        else
                        {
                            if ((mat[j] & check) == check)
                            {
                                isFound = true;
                                BigInteger tempMat = mat[j];
                                mat[j] = mat[pivot];
                                mat[pivot] = tempMat;
                                byte tempRes = res[j];
                                res[j] = res[pivot];
                                res[pivot] = tempRes;
                            }
                        }
                    }
                    if (isFound)
                        pivot += 1;
                }
                for (int i = 127; i >= 0; i--)
                {
                    BigInteger check = 1;
                    check <<= 128 - i - 1;
                    for (int j = i - 1; j >= 0; j--)
                    {
                        if ((mat[j] & check) == check)
                        {
                            mat[j] ^= mat[i];
                            res[j] ^= res[i];
                        }
                    }
                }
                BigInteger s0 = 0;
                BigInteger s1 = 0;
                for (int i = 0; i < 64; i++)
                {
                    s0 |= (BigInteger)res[i] << (63 - i);
                }
                for (int i = 0; i < 64; i++)
                {
                    s1 |= (BigInteger)res[i + 64] << (63 - i);
                }
                string s0String = s0.ToString("X16");
                string s1String = s1.ToString("X16");
                ResultState0.Text = s0String.Substring(s0String.Length - 16, 16);
                ResultState1.Text = s1String.Substring(s1String.Length - 16, 16);
            }
            else
            {
                ResultState0.Text = "";
                ResultState1.Text = "";
            }
        }
        private void BinInput_KeyPress(object sender, KeyPressEventArgs e)
        {
            string s = "";

            s += e.KeyChar;

            byte[] b = Encoding.ASCII.GetBytes(s);

            if (e.KeyChar != (char)Keys.Back && !char.IsControl(e.KeyChar))
            {
                if (!(('0' <= b[0]) && (b[0] <= '1')))
                {
                    e.Handled = true;
                }
            }
        }
    }
}